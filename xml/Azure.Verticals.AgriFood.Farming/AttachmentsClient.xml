<Type Name="AttachmentsClient" FullName="Azure.Verticals.AgriFood.Farming.AttachmentsClient">
  <TypeSignature Language="C#" Value="public class AttachmentsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttachmentsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.AttachmentsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class AttachmentsClient" />
  <TypeSignature Language="F#" Value="type AttachmentsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Attachments service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AttachmentsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of AttachmentsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttachmentsClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Verticals.AgriFood.Farming.AttachmentsClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Verticals.AgriFood.Farming.AttachmentsClient" Usage="new Azure.Verticals.AgriFood.Farming.AttachmentsClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of AttachmentsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttachmentsClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As FarmBeatsClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Verticals.AgriFood.Farming.AttachmentsClient : Uri * Azure.Core.TokenCredential * Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions -&gt; Azure.Verticals.AgriFood.Farming.AttachmentsClient" Usage="new Azure.Verticals.AgriFood.Farming.AttachmentsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of AttachmentsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdate (string farmerId, string attachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdate(string farmerId, string attachmentId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.CreateOrUpdate(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (farmerId As String, attachmentId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdate : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="attachmentsClient.CreateOrUpdate (farmerId, attachmentId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer resource. </param>
        <param name="attachmentId"> ID of the attachment resource. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Creates or updates an attachment resource under a particular farmer. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>Attachment</c>:
            <code>{
              farmerId: string, # Optional. Farmer id for this attachment.
              resourceId: string, # Optional. Associated Resource id for this attachment.
              resourceType: string, # Optional. Associated Resource type for this attachment
            i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
              originalFileName: string, # Optional. Original File Name for this attachment.
              id: string, # Optional. Unique id.
              status: string, # Optional. Status of the resource.
              createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of resource.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdate with required parameters and request content and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            var data = File.OpenRead("<filePath>");
            
            Response response = client.CreateOrUpdate("<farmerId>", "<attachmentId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("farmerId").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("resourceType").ToString());
            Console.WriteLine(result.GetProperty("originalFileName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateAsync (string farmerId, string attachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateAsync(string farmerId, string attachmentId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.CreateOrUpdateAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (farmerId As String, attachmentId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="attachmentsClient.CreateOrUpdateAsync (farmerId, attachmentId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer resource. </param>
        <param name="attachmentId"> ID of the attachment resource. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Creates or updates an attachment resource under a particular farmer. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>Attachment</c>:
            <code>{
              farmerId: string, # Optional. Farmer id for this attachment.
              resourceId: string, # Optional. Associated Resource id for this attachment.
              resourceType: string, # Optional. Associated Resource type for this attachment
            i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
              originalFileName: string, # Optional. Original File Name for this attachment.
              id: string, # Optional. Unique id.
              status: string, # Optional. Status of the resource.
              createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of resource.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdateAsync with required parameters and request content and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            var data = File.OpenRead("<filePath>");
            
            Response response = await client.CreateOrUpdateAsync("<farmerId>", "<attachmentId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("farmerId").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("resourceType").ToString());
            Console.WriteLine(result.GetProperty("originalFileName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (string farmerId, string attachmentId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(string farmerId, string attachmentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.Delete(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (farmerId As String, attachmentId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Delete : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="attachmentsClient.Delete (farmerId, attachmentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the farmer. </param>
        <param name="attachmentId"> ID of the attachment. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes a specified attachment resource under a particular farmer. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Delete with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            Response response = client.Delete("<farmerId>", "<attachmentId>");
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (string farmerId, string attachmentId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(string farmerId, string attachmentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.DeleteAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (farmerId As String, attachmentId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="attachmentsClient.DeleteAsync (farmerId, attachmentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the farmer. </param>
        <param name="attachmentId"> ID of the attachment. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes a specified attachment resource under a particular farmer. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteAsync with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            Response response = await client.DeleteAsync("<farmerId>", "<attachmentId>");
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Download">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Download (string farmerId, string attachmentId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Download(string farmerId, string attachmentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.Download(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Download (farmerId As String, attachmentId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Download : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Download : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="attachmentsClient.Download (farmerId, attachmentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer. </param>
        <param name="attachmentId"> ID of attachment to be downloaded. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Downloads and returns attachment as response for the given input filePath. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Download with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            Response response = client.Download("<farmerId>", "<attachmentId>");
            if (response.ContentStream != null)
            {
                using(Stream outFileStream = File.OpenWrite("<filePath>")
                {
                    response.ContentStream.CopyTo(outFileStream);
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DownloadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DownloadAsync (string farmerId, string attachmentId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DownloadAsync(string farmerId, string attachmentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.DownloadAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DownloadAsync (farmerId As String, attachmentId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DownloadAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DownloadAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="attachmentsClient.DownloadAsync (farmerId, attachmentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer. </param>
        <param name="attachmentId"> ID of attachment to be downloaded. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Downloads and returns attachment as response for the given input filePath. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DownloadAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            Response response = await client.DownloadAsync("<farmerId>", "<attachmentId>");
            if (response.ContentStream != null)
            {
                using(Stream outFileStream = File.OpenWrite("<filePath>")
                {
                    response.ContentStream.CopyTo(outFileStream);
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAttachment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAttachment (string farmerId, string attachmentId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAttachment(string farmerId, string attachmentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.GetAttachment(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAttachment (farmerId As String, attachmentId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAttachment : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAttachment : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="attachmentsClient.GetAttachment (farmerId, attachmentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer. </param>
        <param name="attachmentId"> ID of the attachment. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a specified attachment resource under a particular farmer. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>Attachment</c>:
            <code>{
              farmerId: string, # Optional. Farmer id for this attachment.
              resourceId: string, # Optional. Associated Resource id for this attachment.
              resourceType: string, # Optional. Associated Resource type for this attachment
            i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
              originalFileName: string, # Optional. Original File Name for this attachment.
              id: string, # Optional. Unique id.
              status: string, # Optional. Status of the resource.
              createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of resource.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAttachment with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            Response response = client.GetAttachment("<farmerId>", "<attachmentId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("farmerId").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("resourceType").ToString());
            Console.WriteLine(result.GetProperty("originalFileName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAttachmentAsync (string farmerId, string attachmentId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAttachmentAsync(string farmerId, string attachmentId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.GetAttachmentAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAttachmentAsync (farmerId As String, attachmentId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAttachmentAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="attachmentsClient.GetAttachmentAsync (farmerId, attachmentId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="attachmentId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer. </param>
        <param name="attachmentId"> ID of the attachment. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a specified attachment resource under a particular farmer. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>Attachment</c>:
            <code>{
              farmerId: string, # Optional. Farmer id for this attachment.
              resourceId: string, # Optional. Associated Resource id for this attachment.
              resourceType: string, # Optional. Associated Resource type for this attachment
            i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
              originalFileName: string, # Optional. Original File Name for this attachment.
              id: string, # Optional. Unique id.
              status: string, # Optional. Status of the resource.
              createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of resource.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> or <paramref name="attachmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAttachmentAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            Response response = await client.GetAttachmentAsync("<farmerId>", "<attachmentId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("farmerId").ToString());
            Console.WriteLine(result.GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("resourceType").ToString());
            Console.WriteLine(result.GetProperty("originalFileName").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsByFarmerId">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAttachmentsByFarmerId (string farmerId, System.Collections.Generic.IEnumerable&lt;string&gt; resourceIds = default, System.Collections.Generic.IEnumerable&lt;string&gt; resourceTypes = default, System.Collections.Generic.IEnumerable&lt;string&gt; ids = default, System.Collections.Generic.IEnumerable&lt;string&gt; names = default, System.Collections.Generic.IEnumerable&lt;string&gt; propertyFilters = default, System.Collections.Generic.IEnumerable&lt;string&gt; statuses = default, DateTimeOffset? minCreatedDateTime = default, DateTimeOffset? maxCreatedDateTime = default, DateTimeOffset? minLastModifiedDateTime = default, DateTimeOffset? maxLastModifiedDateTime = default, int? maxPageSize = default, string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAttachmentsByFarmerId(string farmerId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; resourceIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; resourceTypes, class System.Collections.Generic.IEnumerable`1&lt;string&gt; ids, class System.Collections.Generic.IEnumerable`1&lt;string&gt; names, class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyFilters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; statuses, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minLastModifiedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxLastModifiedDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.GetAttachmentsByFarmerId(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAttachmentsByFarmerId (farmerId As String, Optional resourceIds As IEnumerable(Of String) = Nothing, Optional resourceTypes As IEnumerable(Of String) = Nothing, Optional ids As IEnumerable(Of String) = Nothing, Optional names As IEnumerable(Of String) = Nothing, Optional propertyFilters As IEnumerable(Of String) = Nothing, Optional statuses As IEnumerable(Of String) = Nothing, Optional minCreatedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxCreatedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional minLastModifiedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxLastModifiedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsByFarmerId : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAttachmentsByFarmerId : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="attachmentsClient.GetAttachmentsByFarmerId (farmerId, resourceIds, resourceTypes, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="resourceIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="resourceTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="names" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="propertyFilters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="statuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="minCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="minLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer. </param>
        <param name="resourceIds"> Resource Ids of the resource. </param>
        <param name="resourceTypes"> Resource Types of the resource. </param>
        <param name="ids"> Ids of the resource. </param>
        <param name="names"> Names of the resource. </param>
        <param name="propertyFilters">
            Filters on key-value pairs within the Properties object.
            eg. "{testKey} eq {testValue}".
            </param>
        <param name="statuses"> Statuses of the resource. </param>
        <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Returns a paginated list of attachment resources under a particular farmer. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>AttachmentListResponseValue</c>:
            <code>{
              farmerId: string, # Optional. Farmer id for this attachment.
              resourceId: string, # Optional. Associated Resource id for this attachment.
              resourceType: string, # Optional. Associated Resource type for this attachment
            i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
              originalFileName: string, # Optional. Original File Name for this attachment.
              id: string, # Optional. Unique id.
              status: string, # Optional. Status of the resource.
              createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of resource.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAttachmentsByFarmerId with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            foreach (var data in client.GetAttachmentsByFarmerId("<farmerId>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetAttachmentsByFarmerId with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            foreach (var data in client.GetAttachmentsByFarmerId("<farmerId>", new String[]{"<resourceIds>"}, new String[]{"<resourceTypes>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("farmerId").ToString());
                Console.WriteLine(result.GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("resourceType").ToString());
                Console.WriteLine(result.GetProperty("originalFileName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAttachmentsByFarmerIdAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAttachmentsByFarmerIdAsync (string farmerId, System.Collections.Generic.IEnumerable&lt;string&gt; resourceIds = default, System.Collections.Generic.IEnumerable&lt;string&gt; resourceTypes = default, System.Collections.Generic.IEnumerable&lt;string&gt; ids = default, System.Collections.Generic.IEnumerable&lt;string&gt; names = default, System.Collections.Generic.IEnumerable&lt;string&gt; propertyFilters = default, System.Collections.Generic.IEnumerable&lt;string&gt; statuses = default, DateTimeOffset? minCreatedDateTime = default, DateTimeOffset? maxCreatedDateTime = default, DateTimeOffset? minLastModifiedDateTime = default, DateTimeOffset? maxLastModifiedDateTime = default, int? maxPageSize = default, string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAttachmentsByFarmerIdAsync(string farmerId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; resourceIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; resourceTypes, class System.Collections.Generic.IEnumerable`1&lt;string&gt; ids, class System.Collections.Generic.IEnumerable`1&lt;string&gt; names, class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyFilters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; statuses, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minLastModifiedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxLastModifiedDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.AttachmentsClient.GetAttachmentsByFarmerIdAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAttachmentsByFarmerIdAsync (farmerId As String, Optional resourceIds As IEnumerable(Of String) = Nothing, Optional resourceTypes As IEnumerable(Of String) = Nothing, Optional ids As IEnumerable(Of String) = Nothing, Optional names As IEnumerable(Of String) = Nothing, Optional propertyFilters As IEnumerable(Of String) = Nothing, Optional statuses As IEnumerable(Of String) = Nothing, Optional minCreatedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxCreatedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional minLastModifiedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxLastModifiedDateTime As Nullable(Of DateTimeOffset) = Nothing, Optional maxPageSize As Nullable(Of Integer) = Nothing, Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAttachmentsByFarmerIdAsync : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAttachmentsByFarmerIdAsync : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="attachmentsClient.GetAttachmentsByFarmerIdAsync (farmerId, resourceIds, resourceTypes, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="farmerId" Type="System.String" />
        <Parameter Name="resourceIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="resourceTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="names" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="propertyFilters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="statuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="minCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="minLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="farmerId"> ID of the associated farmer. </param>
        <param name="resourceIds"> Resource Ids of the resource. </param>
        <param name="resourceTypes"> Resource Types of the resource. </param>
        <param name="ids"> Ids of the resource. </param>
        <param name="names"> Names of the resource. </param>
        <param name="propertyFilters">
            Filters on key-value pairs within the Properties object.
            eg. "{testKey} eq {testValue}".
            </param>
        <param name="statuses"> Statuses of the resource. </param>
        <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Returns a paginated list of attachment resources under a particular farmer. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>AttachmentListResponseValue</c>:
            <code>{
              farmerId: string, # Optional. Farmer id for this attachment.
              resourceId: string, # Optional. Associated Resource id for this attachment.
              resourceType: string, # Optional. Associated Resource type for this attachment
            i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
              originalFileName: string, # Optional. Original File Name for this attachment.
              id: string, # Optional. Unique id.
              status: string, # Optional. Status of the resource.
              createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
              modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
              name: string, # Optional. Name to identify resource.
              description: string, # Optional. Textual description of resource.
              eTag: string, # Optional. The ETag value to implement optimistic concurrency.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="farmerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="farmerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAttachmentsByFarmerIdAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            await foreach (var data in client.GetAttachmentsByFarmerIdAsync("<farmerId>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetAttachmentsByFarmerIdAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new AttachmentsClient(endpoint, credential);
            
            await foreach (var data in client.GetAttachmentsByFarmerIdAsync("<farmerId>", new String[]{"<resourceIds>"}, new String[]{"<resourceTypes>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("farmerId").ToString());
                Console.WriteLine(result.GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("resourceType").ToString());
                Console.WriteLine(result.GetProperty("originalFileName").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.AttachmentsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.AttachmentsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
